{"ast":null,"code":"import { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_IN_REQUEST, SIGN_IN_SUCCESS, SIGN_IN_FAILURE } from \"../reducers/user\";\nimport axios from \"axios\"; //Acion Area ////////////////////////////////////////////////////\n\nfunction signUpAPI(data) {\n  return {\n    data: {\n      id: 1,\n      email: \"aaa@abc.com\",\n      nickname: \"TEST\"\n    }\n  }; // return axios.post(\"http://localhost:4000/api/signup\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: result.data\n    });\n  }\n} ///////////////////////////////////////////////////////////////////\n//Acion Area ////////////////////////////////////////////////////\n\n\nfunction signInAPI(data) {\n  return axios.post(\"http://localhost:4000/api/user/signin\", data);\n}\n\nfunction* signIn(action) {\n  try {\n    const result = yield call(signInAPI, action.data);\n    yield put({\n      type: SIGN_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SIGN_IN_FAILURE,\n      data: result.data\n    });\n  }\n} ///////////////////////////////////////////////////////////////////\n// Watch Area\n\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchSignIn() {\n  yield takeLatest(SIGN_IN_REQUEST, signIn);\n} // Include Area\n\n\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchSignIn)]);\n}","map":{"version":3,"sources":["/Users/njs/Documents/4leaf-education/next_app/sagas/user.js"],"names":["call","delay","all","fork","put","takeLatest","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_IN_REQUEST","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","axios","signUpAPI","data","id","email","nickname","signUp","action","result","type","error","console","signInAPI","post","signIn","watchSignUp","watchSignIn","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAO;AACLA,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAE,CADA;AAEJC,MAAAA,KAAK,EAAE,aAFH;AAGJC,MAAAA,QAAQ,EAAE;AAHN;AADD,GAAP,CADuB,CAQvB;AACD;;AAED,UAAUC,MAAV,CAAiBC,MAAjB,EAAyB;AACvB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAACa,SAAD,EAAYM,MAAM,CAACL,IAAnB,CAAzB;AAEA,UAAMV,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEd,eADE;AAERO,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEb,eADE;AAERM,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID;AACF,C,CACD;AAEA;;;AACA,SAASU,SAAT,CAAmBV,IAAnB,EAAyB;AACvB,SAAOF,KAAK,CAACa,IAAN,CAAW,uCAAX,EAAoDX,IAApD,CAAP;AACD;;AAED,UAAUY,MAAV,CAAiBP,MAAjB,EAAyB;AACvB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAACwB,SAAD,EAAYL,MAAM,CAACL,IAAnB,CAAzB;AAEA,UAAMV,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEX,eADE;AAERI,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEV,eADE;AAERG,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID;AACF,C,CACD;AACA;;;AACA,UAAUa,WAAV,GAAwB;AACtB,QAAMtB,UAAU,CAACC,eAAD,EAAkBY,MAAlB,CAAhB;AACD;;AACD,UAAUU,WAAV,GAAwB;AACtB,QAAMvB,UAAU,CAACI,eAAD,EAAkBiB,MAAlB,CAAhB;AACD,C,CAED;;;AACA,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM3B,GAAG,CAAC,CAACC,IAAI,CAACwB,WAAD,CAAL,EAAoBxB,IAAI,CAACyB,WAAD,CAAxB,CAAD,CAAT;AACD","sourcesContent":["import { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_IN_REQUEST,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_FAILURE,\n} from \"../reducers/user\";\nimport axios from \"axios\";\n\n//Acion Area ////////////////////////////////////////////////////\nfunction signUpAPI(data) {\n  return {\n    data: {\n      id: 1,\n      email: \"aaa@abc.com\",\n      nickname: \"TEST\",\n    },\n  };\n  // return axios.post(\"http://localhost:4000/api/signup\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: result.data,\n    });\n  }\n}\n///////////////////////////////////////////////////////////////////\n\n//Acion Area ////////////////////////////////////////////////////\nfunction signInAPI(data) {\n  return axios.post(\"http://localhost:4000/api/user/signin\", data);\n}\n\nfunction* signIn(action) {\n  try {\n    const result = yield call(signInAPI, action.data);\n\n    yield put({\n      type: SIGN_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SIGN_IN_FAILURE,\n      data: result.data,\n    });\n  }\n}\n///////////////////////////////////////////////////////////////////\n// Watch Area\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* watchSignIn() {\n  yield takeLatest(SIGN_IN_REQUEST, signIn);\n}\n\n// Include Area\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchSignIn)]);\n}\n"]},"metadata":{},"sourceType":"module"}