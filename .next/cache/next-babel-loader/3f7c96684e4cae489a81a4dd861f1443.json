{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(imageUpload),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchImageUpload),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(feedSaga);\n\nimport { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { IMAGE_UPLOAD_REQUEST, IMAGE_UPLOAD_SUCCESS, IMAGE_UPLOAD_FAILURE } from \"../reducers/feed\"; // ACTION AREA ///////////////////////////////////////////////////////////////\n\nfunction imageUploadAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction imageUpload(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function imageUpload$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(imageUploadAPI, action.data);\n\n        case 3:\n          _result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: IMAGE_UPLOAD_SUCCESS,\n            data: _result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: IMAGE_UPLOAD_FAILURE,\n            data: result.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} /////////////////////////////////////////////////////////////////////////////\n// WATCH AREA\n\n\nfunction watchImageUpload() {\n  return _regeneratorRuntime.wrap(function watchImageUpload$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(IMAGE_UPLOAD_REQUEST, imageUpload);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function feedSaga() {\n  return _regeneratorRuntime.wrap(function feedSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchImageUpload) // ,\n          // ,\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/njs/Documents/4leaf-education/next_app/sagas/feed.js"],"names":["imageUpload","watchImageUpload","feedSaga","call","delay","all","fork","put","takeLatest","axios","IMAGE_UPLOAD_REQUEST","IMAGE_UPLOAD_SUCCESS","IMAGE_UPLOAD_FAILURE","imageUploadAPI","data","post","action","result","type","console","error"],"mappings":";;oDAaUA,W;qDAoBAC,gB;qDAIeC,Q;;AArCzB,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,kBAJP,C,CAMA;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOL,KAAK,CAACM,IAAN,CAAW,iBAAX,EAA8BD,IAA9B,CAAP;AACD;;AAED,SAAUd,WAAV,CAAsBgB,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMb,IAAI,CAACU,cAAD,EAAiBG,MAAM,CAACF,IAAxB,CAAV;;AAFnB;AAEUG,UAAAA,OAFV;AAAA;AAII,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEP,oBADE;AAERG,YAAAA,IAAI,EAAEG,OAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIK,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMb,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEN,oBADE;AAERE,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;AAEA;;;AACA,SAAUb,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACE,oBAAD,EAAuBV,WAAvB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRC,IAAI,CAACL,gBAAD,CADI,CAER;AACA;AAHQ,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  IMAGE_UPLOAD_REQUEST,\n  IMAGE_UPLOAD_SUCCESS,\n  IMAGE_UPLOAD_FAILURE,\n} from \"../reducers/feed\";\n\n// ACTION AREA ///////////////////////////////////////////////////////////////\nfunction imageUploadAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction* imageUpload(action) {\n  try {\n    const result = yield call(imageUploadAPI, action.data);\n\n    yield put({\n      type: IMAGE_UPLOAD_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: IMAGE_UPLOAD_FAILURE,\n      data: result.data,\n    });\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n\n// WATCH AREA\nfunction* watchImageUpload() {\n  yield takeLatest(IMAGE_UPLOAD_REQUEST, imageUpload);\n}\n\nexport default function* feedSaga() {\n  yield all([\n    fork(watchImageUpload),\n    // ,\n    // ,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}