{"ast":null,"code":"import { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { IMAGE_UPLOAD_REQUEST, IMAGE_UPLOAD_SUCCESS, IMAGE_UPLOAD_FAILURE, //\nFEED_CREATE_REQUEST, FEED_CREATE_FAILURE, FEED_CREATE_SUCCESS } from \"../reducers/feed\"; // ACTION AREA ///////////////////////////////////////////////////////////////\n\nfunction imageUploadAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction* imageUpload(action) {\n  try {\n    const result = yield call(imageUploadAPI, action.data);\n    yield put({\n      type: IMAGE_UPLOAD_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: IMAGE_UPLOAD_FAILURE,\n      data: result.data\n    });\n  }\n}\n\nfunction feedCreateAPI(data) {\n  return axios.post(\"/api/feed/create\", data);\n}\n\nfunction* feedCreate(action) {\n  try {\n    const result = yield call(feedCreateAPI, action.data);\n    yield put({\n      type: FEED_CREATE_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: FEED_CREATE_FAILURE,\n      data: result.data\n    });\n  }\n} /////////////////////////////////////////////////////////////////////////////\n// WATCH AREA\n\n\nfunction* watchImageUpload() {\n  yield takeLatest(IMAGE_UPLOAD_REQUEST, imageUpload);\n}\n\nfunction* watchFeedCreate() {\n  yield takeLatest(FEED_CREATE_REQUEST, feedCreate);\n}\n\nexport default function* feedSaga() {\n  yield all([fork(watchImageUpload), fork(watchFeedCreate) // ,\n  // ,\n  ]);\n}","map":{"version":3,"sources":["/Users/njs/Documents/4leaf-education/next_app/sagas/feed.js"],"names":["call","delay","all","fork","put","takeLatest","axios","IMAGE_UPLOAD_REQUEST","IMAGE_UPLOAD_SUCCESS","IMAGE_UPLOAD_FAILURE","FEED_CREATE_REQUEST","FEED_CREATE_FAILURE","FEED_CREATE_SUCCESS","imageUploadAPI","data","post","imageUpload","action","result","type","error","console","feedCreateAPI","feedCreate","watchImageUpload","watchFeedCreate","feedSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIE;AACAC,mBALF,EAMEC,mBANF,EAOEC,mBAPF,QAQO,kBARP,C,CAUA;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOR,KAAK,CAACS,IAAN,CAAW,iBAAX,EAA8BD,IAA9B,CAAP;AACD;;AAED,UAAUE,WAAV,CAAsBC,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACa,cAAD,EAAiBI,MAAM,CAACH,IAAxB,CAAzB;AAEA,UAAMV,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEX,oBADE;AAERM,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMhB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEV,oBADE;AAERK,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,aAAT,CAAuBR,IAAvB,EAA6B;AAC3B,SAAOR,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+BD,IAA/B,CAAP;AACD;;AAED,UAAUS,UAAV,CAAqBN,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACsB,aAAD,EAAgBL,MAAM,CAACH,IAAvB,CAAzB;AAEA,UAAMV,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEP,mBADE;AAERE,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMhB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAER,mBADE;AAERG,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID;AACF,C,CAED;AAEA;;;AACA,UAAUU,gBAAV,GAA6B;AAC3B,QAAMnB,UAAU,CAACE,oBAAD,EAAuBS,WAAvB,CAAhB;AACD;;AAED,UAAUS,eAAV,GAA4B;AAC1B,QAAMpB,UAAU,CAACK,mBAAD,EAAsBa,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CACRC,IAAI,CAACqB,gBAAD,CADI,EAERrB,IAAI,CAACsB,eAAD,CAFI,CAGR;AACA;AAJQ,GAAD,CAAT;AAMD","sourcesContent":["import { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  IMAGE_UPLOAD_REQUEST,\n  IMAGE_UPLOAD_SUCCESS,\n  IMAGE_UPLOAD_FAILURE,\n  //\n  FEED_CREATE_REQUEST,\n  FEED_CREATE_FAILURE,\n  FEED_CREATE_SUCCESS,\n} from \"../reducers/feed\";\n\n// ACTION AREA ///////////////////////////////////////////////////////////////\nfunction imageUploadAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction* imageUpload(action) {\n  try {\n    const result = yield call(imageUploadAPI, action.data);\n\n    yield put({\n      type: IMAGE_UPLOAD_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: IMAGE_UPLOAD_FAILURE,\n      data: result.data,\n    });\n  }\n}\n\nfunction feedCreateAPI(data) {\n  return axios.post(\"/api/feed/create\", data);\n}\n\nfunction* feedCreate(action) {\n  try {\n    const result = yield call(feedCreateAPI, action.data);\n\n    yield put({\n      type: FEED_CREATE_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: FEED_CREATE_FAILURE,\n      data: result.data,\n    });\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n\n// WATCH AREA\nfunction* watchImageUpload() {\n  yield takeLatest(IMAGE_UPLOAD_REQUEST, imageUpload);\n}\n\nfunction* watchFeedCreate() {\n  yield takeLatest(FEED_CREATE_REQUEST, feedCreate);\n}\n\nexport default function* feedSaga() {\n  yield all([\n    fork(watchImageUpload),\n    fork(watchFeedCreate),\n    // ,\n    // ,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}