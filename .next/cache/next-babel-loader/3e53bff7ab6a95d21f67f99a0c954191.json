{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(imageUpload),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(feedCreate),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchImageUpload),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchFeedCreate),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(feedSaga);\n\nimport { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { IMAGE_UPLOAD_REQUEST, IMAGE_UPLOAD_SUCCESS, IMAGE_UPLOAD_FAILURE, //\nFEED_CREATE_REQUEST, FEED_CREATE_FAILURE, FEED_CREATE_SUCCESS } from \"../reducers/feed\"; // ACTION AREA ///////////////////////////////////////////////////////////////\n\nfunction imageUploadAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction imageUpload(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function imageUpload$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(imageUploadAPI, action.data);\n\n        case 3:\n          _result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: IMAGE_UPLOAD_SUCCESS,\n            data: _result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: IMAGE_UPLOAD_FAILURE,\n            data: result.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction feedCreateAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction feedCreate(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function feedCreate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(feedCreateAPI, action.data);\n\n        case 3:\n          _result2 = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: FEED_CREATE_SUCCESS,\n            data: _result2.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: FEED_CREATE_FAILURE,\n            data: result.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} /////////////////////////////////////////////////////////////////////////////\n// WATCH AREA\n\n\nfunction watchImageUpload() {\n  return _regeneratorRuntime.wrap(function watchImageUpload$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(IMAGE_UPLOAD_REQUEST, imageUpload);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchFeedCreate() {\n  return _regeneratorRuntime.wrap(function watchFeedCreate$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(FEED_CREATE_REQUEST, feedCreate);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function feedSaga() {\n  return _regeneratorRuntime.wrap(function feedSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchImageUpload), fork(watchFeedCreate) // ,\n          // ,\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/njs/Documents/4leaf-education/next_app/sagas/feed.js"],"names":["imageUpload","feedCreate","watchImageUpload","watchFeedCreate","feedSaga","call","delay","all","fork","put","takeLatest","axios","IMAGE_UPLOAD_REQUEST","IMAGE_UPLOAD_SUCCESS","IMAGE_UPLOAD_FAILURE","FEED_CREATE_REQUEST","FEED_CREATE_FAILURE","FEED_CREATE_SUCCESS","imageUploadAPI","data","post","action","result","type","console","error","feedCreateAPI"],"mappings":";;oDAiBUA,W;qDAqBAC,U;qDAoBAC,gB;qDAIAC,e;qDAIeC,Q;;AAlEzB,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIE;AACAC,mBALF,EAMEC,mBANF,EAOEC,mBAPF,QAQO,kBARP,C,CAUA;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOR,KAAK,CAACS,IAAN,CAAW,iBAAX,EAA8BD,IAA9B,CAAP;AACD;;AAED,SAAUnB,WAAV,CAAsBqB,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMhB,IAAI,CAACa,cAAD,EAAiBG,MAAM,CAACF,IAAxB,CAAV;;AAFnB;AAEUG,UAAAA,OAFV;AAAA;AAII,iBAAMb,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEV,oBADE;AAERM,YAAAA,IAAI,EAAEG,OAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIK,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMhB,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAET,oBADE;AAERK,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASO,aAAT,CAAuBP,IAAvB,EAA6B;AAC3B,SAAOR,KAAK,CAACS,IAAN,CAAW,iBAAX,EAA8BD,IAA9B,CAAP;AACD;;AAED,SAAUlB,UAAV,CAAqBoB,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMhB,IAAI,CAACqB,aAAD,EAAgBL,MAAM,CAACF,IAAvB,CAAV;;AAFnB;AAEUG,UAAAA,QAFV;AAAA;AAII,iBAAMb,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEN,mBADE;AAERE,YAAAA,IAAI,EAAEG,QAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIK,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMhB,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEP,mBADE;AAERG,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;AAEA;;;AACA,SAAUjB,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACE,oBAAD,EAAuBZ,WAAvB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACK,mBAAD,EAAsBd,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRC,IAAI,CAACN,gBAAD,CADI,EAERM,IAAI,CAACL,eAAD,CAFI,CAGR;AACA;AAJQ,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, delay, all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  IMAGE_UPLOAD_REQUEST,\n  IMAGE_UPLOAD_SUCCESS,\n  IMAGE_UPLOAD_FAILURE,\n  //\n  FEED_CREATE_REQUEST,\n  FEED_CREATE_FAILURE,\n  FEED_CREATE_SUCCESS,\n} from \"../reducers/feed\";\n\n// ACTION AREA ///////////////////////////////////////////////////////////////\nfunction imageUploadAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction* imageUpload(action) {\n  try {\n    const result = yield call(imageUploadAPI, action.data);\n\n    yield put({\n      type: IMAGE_UPLOAD_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: IMAGE_UPLOAD_FAILURE,\n      data: result.data,\n    });\n  }\n}\n\nfunction feedCreateAPI(data) {\n  return axios.post(\"/api/feed/image\", data);\n}\n\nfunction* feedCreate(action) {\n  try {\n    const result = yield call(feedCreateAPI, action.data);\n\n    yield put({\n      type: FEED_CREATE_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: FEED_CREATE_FAILURE,\n      data: result.data,\n    });\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n\n// WATCH AREA\nfunction* watchImageUpload() {\n  yield takeLatest(IMAGE_UPLOAD_REQUEST, imageUpload);\n}\n\nfunction* watchFeedCreate() {\n  yield takeLatest(FEED_CREATE_REQUEST, feedCreate);\n}\n\nexport default function* feedSaga() {\n  yield all([\n    fork(watchImageUpload),\n    fork(watchFeedCreate),\n    // ,\n    // ,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}